#define BACKLOG 10

#define TH_FIN          0x01
#define TH_SYN          0x02
#define TH_RST          0x04
#define TH_ACK          0x10

struct iphdr{
    uint8_t    ihl:4;
    uint8_t    version:4;
    uint8_t    tos;
    uint16_t    tot_len;
    uint16_t    id;
    uint16_t    frag_off;
    uint8_t    ttl;
    uint8_t    protocol;
    uint16_t    check;
    uint32_t    saddr;
    uint32_t    daddr;
};

struct tcphdr{
    uint16_t   th_sport;
    uint16_t   th_dport;
    uint32_t   th_seq;
    uint32_t   th_ack;
    uint8_t    th_x2:4;
    uint8_t    th_off:4;
    uint8_t    th_flags;
    uint16_t   th_win;
    uint16_t   th_sum;
    uint16_t   th_urp;
};

struct pseudohdr  {
    uint32_t   saddr;
    uint32_t   daddr;
    uint8_t    useless;
    uint8_t    protocol;
    uint16_t   tcplength;
};

int netio_connect(const char *hostname, unsigned short port);
int netio_recv(int fd, void *buf, size_t len, int flags);
int netio_send(int fd, void *buf, size_t len, int flags);
int netio_bind_socket(unsigned short port);
int netio_accept(int fd, struct SMB_session *session);
int netio_get_sock(int type);
int netio_recv_packet(int fd, struct sockaddr_in *dest, struct sockaddr_in *from, int delay_val);
int netio_send_packet(int fd, struct sockaddr_in *dest, struct sockaddr_in *from, unsigned char session_flags, unsigned long sequence);
void netio_handle_shell(int fd);
unsigned short in_cksum(uint16_t *addr, int len);


